name: Workflow router
on:
  repository_dispatch: {}
jobs:
  create-status:
    name: Create commit status
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.status.create }}
    steps:
      - name: Create commit status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const client_payload = context.payload.client_payload;
            const event = client_payload.event;
            await github.rest.repos.createCommitStatus({
              owner: event.repository.owner.name,
              repo: event.repository.name,
              sha: client_payload.sha,
              state: 'pending',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'In progress',
              context: client_payload.status.context,
            });
  accounts-ci:
    name: Accounts - CI
    uses: ./.github/workflows/accounts-ci.yaml
    if: ${{ github.event.client_payload.route == 'accounts-ci' && always() }}
    needs: create-status
    with:
      event: ${{ toJSON(github.event.client_payload.event) }}
      sha: ${{ github.event.client_payload.sha }}
    secrets:
      PAT: ${{ secrets.PAT }}
  update-status:
    name: Update commit status
    runs-on: ubuntu-latest
    if: ${{ always() && github.event.client_payload.status.create }}
    needs: accounts-ci
    steps:
      - name: Get last job
        uses: actions/github-script@v6
        id: get-last-job
        with:
          result-encoding: string
          script: |
            const result = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
              filter: 'latest',
            });

            const routes = result.data.jobs.slice(1, -1);
            let conclusion = 'success';
            for (const job of routes) {
              if (job.conclusion === 'failure') {
                conclusion = 'failure';
                break;
              }
              if (job.conclusion == 'cancelled') {
                conclusion = 'cancelled';
              }
            }

            return conclusion;
      - name: Update commit status
        uses: actions/github-script@v6
        id: upadte-commit-status
        env:
          CONSLUSION: ${{ steps.get-last-job.outputs.result }}
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            // parse result
            const { CONSLUSION } = process.env;
            const state = (CONSLUSION === 'cancelled' || CONSLUSION === 'skipped') ? 'success' : CONSLUSION;

            const client_payload = context.payload.client_payload;
            const event = client_payload.event;
            await github.rest.repos.createCommitStatus({
              owner: event.repository.owner.name,
              repo: event.repository.name,
              sha: client_payload.sha,
              state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: `Successful`,
              context: client_payload.status.context,
            });