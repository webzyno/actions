name: Workflow router
on:
  repository_dispatch: {}
jobs:
  create-status:
    name: Create commit status
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.status.create }}
    steps:
      - name: Create commit status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const client_payload = context.payload.client_payload;
            const event = client_payload.event;
            await github.rest.repos.createCommitStatus({
              owner: event.repository.owner.name,
              repo: event.repository.name,
              sha: client_payload.sha,
              state: 'pending',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'In progress',
              context: client_payload.status.context,
            });
  run-workflow:
    name: ${{ github.event.client_payload.name }}
    uses: ./.github/workflows/${{ github.event.client_payload.workflow }}.yaml
    if: ${{ always() }}
    needs: create-status
    with:
      event: ${{ toJSON(github.event.client_payload.event) }}
    secrets:
      PAT: ${{ secrets.PAT }}
  update-status:
    name: Update commit status
    runs-on: ubuntu-latest
    if: ${{ always() && github.event.client_payload.status.create }}
    needs: run-workflow
    steps:
      - name: Update commit status
        uses: actions/github-script@v6
        id: upadte-commit-status
        env:
          RESULT: ${{ needs.run-workflow.result }}
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            // parse result
            const { RESULT } = process.env;
            const state = (RESULT === 'cancelled' || RESULT === 'skipped') ? 'success' : RESULT;

            const client_payload = context.payload.client_payload;
            const event = client_payload.event;
            await github.rest.repos.createCommitStatus({
              owner: event.repository.owner.name,
              repo: event.repository.name,
              sha: client_payload.sha,
              state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: `Successful`,
              context: client_payload.status.context,
            });